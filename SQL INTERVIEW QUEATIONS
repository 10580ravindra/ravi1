 1.how to change data type with data in table
 A. 1).first check table constraints 
    2).create table with reference of originol table 
    3).truncate originol table
    4).alter data type for that field in originol table 
    5).insert data into createde table to originol table 
    6).enable constraints 
2.How to disable constraint 
A.alter table table_name disable constraint constr_nm
2.How to enable constraint 
A.alter table table_name enable constraint constr_nm 
3.what is simple view and complex view.
A.simple view is accessing with single table.and it is not allowed dml operations and function like group by,count,having.
  complex views are accessing with multiple table and its allowed dml operations and aggregate functions.
4.what is the diff between view meterilized view.
A.The main difference between views and materialized views is that views are dynamic and materialized views are static. This means that views always reflect the latest data from the underlying tables or views, while materialized views only show the data from the last refresh.
5.diff between rownum and rowid.
A.The actual difference between rowid and rownum is, that rowid is a permanent unique identifier for that row. However, the rownum is temporary. If you change your query, the rownum number will refer to another row, the rowid won't. So the ROWNUM is a consecutive number which applicable for a specific SQL statement only.
6.Types of Materilized views in oracle.
A.1.create materialized view <viewnm>
[build immediet/build defeored] or
[on demand and on commit] or 
[refresh complete/refresh fast/refersh force] as <select * from tablenm>
7.what is the syntax of materialized view log.
A.create materialized view log on <table name>
Note:-we need primary key on base table for creating log on meterailzed view 
8.what is normalization .
A.Normalization is the process to eliminate data redundancy and enhance data integrity in the table.
Normalization also helps to organize the data in the database. It is a multi-step process that sets the 
data into tabular form and removes the duplicated data from the relational tables.
9.what is Denormalization .
A.Denormalization is the process of adding precomputed redundant data to an otherwise normalized relational database to improve read performance of the database. Normalizing a database involves removing redundancy so only a single copy exists of each piece of information.
10.hoe many ways we can write materialized views;
A.create MATERIALIZED view mvravi as select * from emp;
select * from mvravi;
create MATERIALIZED view mvravi1 build IMMEDIATE as select * from emp;
select * from mvravi1;
exec dbms_mview.refresh('mvravi6');
create MATERIALIZED view mvravi2 build DEFERRED as select * from emp;
select * from mvravi2;
create MATERIALIZED view mvravi3 refresh on demand as select * from emp;
select * from mvravi3;
create MATERIALIZED view mvravi4 refresh on commit as select * from emp;
select * from mvravi4;
create MATERIALIZED view mvravi5 REFRESH FAST ON demand as select * from emp;
select * from mvravi5;
create MATERIALIZED view mvravi6 REFRESH complete  as select * from emp;
select * from mvravi6;
create MATERIALIZED view mvravi7 REFRESH fast  as select * from emp;
select * from mvravi7;
11.cursor example.
A.declare v_name varchar2(20);cursor c1(v_no number) is select empnm from emp where salary >v_no;
begin
open c1(100000);
loop fetch c1 into v_name;
dbms_output.put_line(v_name);
exit when c1%notfound;end loop;
close c1;end;
12.what is triggers and types of triggers.
A.Types of Triggers
      1.DML Triggers
      2.DDL Triggers
      3.system Event
      4.compund Triggers
      5.instead of Triggers
13.Example of Trigger.
A.1).CREATE OR REPLACE TRIGGER <TRNM> BEFORE INSERT OR DELETE OR UPDATE ON emp
FOR EACH ROW
ENABLE 
DECLARE 
V_USER DATATYPE;
BEGIN
SELECT USER INTO V_USER FROM DUAL;
IF INSERTING THEN
DBMS_OUTPUT.PUT_LINE('ONE RECORD IS INSERTED BY',V_USER);
ELSEIF DELETING THEN
DBMS_OUTPUT.PUT_LINE('ONE RECORD IS DELETED BY',V_USER);
ELSEIF UPADTING THEN
DBMS_OUTPUT.PUT_LINE('ONE RECORD IS UPADTED BY',V_USER);ENDIF ;
END;
2).CREATE OR REPLACE TRIGGER <TRNM> BEFORE INSERT OR DELETE OR UPDATE ON TAB_NM
FOR EACH ROW
ENABLE 
DECLARE 
V_USER DATATYPE;
v_DATE DATATYPE;
BEGIN
SELECT USER ,TO_DATE(SYSDATE,'DD/MM/YYYY')INTO V_USER,v_DATE FROM DUAL;
IF INSERTING THEN
INSERT INTO EMP(EMP_NO,DEPTID,USER_NM,OPERATION)
VALUES(:NEW.Sh_emp_no,null,v_user,v_DAte,'insert');
ELSEIF DELETING THEN
INSERT INTO EMP(EMP_NO,DEPTID,USER_NM,OPERATION)
VALUES(null,:NEW:sh_DEPTID,v_user,v_DAte,'delete');
ELSEIF UPADTING THEN
INSERT INTO EMP(EMP_NO,DEPTID,USER_NM,OPERATION)
VALUES(:OLD.Sh_emp_no,OLD.sh_deptid,v_user,v_DAte,'insert');ENDIF;
END;
14.What Is Collections.
A. A Homogenious single dimensions data structure which is made of elements of same datatypes is called Collections.
   * The PL/SQL Collections consist of a cell with subscript is called index.
   * Data is stored into these fields and can be identified and accessed using index number.
Types of Collections:-
---------------------
   * Persistant
        1.Nested Tables
        2.VARRAYS
   * Non_Persistant
        1.Associative Arrays
NESTED TABLES
----------------
* Nested Tables Are Nested Collections.
* Nested Tables Has No Upper Limits On Rows.
VARRAYS
-------
* Variable_Sized Arrays are persistant collections.
* VARRAYs are Bounded(VARRAYS can be hold fixed amount elments)
ASSOCIATIVE ARRAYS
-------------------
* Associative Arrays are non_persistant collections.
* They can't stored into the database
* They can't reuse
* Available In PL/SQL block sessions.
15.How to Create nested Table Collections.
A.DECLARE 
  Type My_nested_table is TABLE OF number;
  v_var My_nested_table :=My_nested_table(2,5,4,2,6,8,3,7,6,5,9);
BEGIN 
dbms_output_put.Line('value of index'||v_var(1));
END;
A.DECLARE 
  Type My_nested_table is TABLE OF number;
  v_var My_nested_table :=My_nested_table(2,5,4,2,6,8,3,7,6,5,9);
BEGIN 
FOR I IN 1..v_var.count
loop 
dbms_output.put_Line('value stored at index' ||' '||i ||' '||'is '||' '||v_var(i));
end loop;
END;
16.What Is Nested Table.
A.Nested is a one dimensional data structure which are presistant and unbounded in nature.
it accessiable sql and plsql and table ,records and objects definations.
17.How To create nested table using data base collection objects.
A.CREATE OR REPLACE type My_nested_table IS TABLE OF VARCHAR2(100);
  CREATE TABLE MY_SUBJECT (SUB_ID VARCHAR2(10),SUB_NAME VARCHAR2(100),sub_schedule_day my_nested_table)
NESTED TABLE sub_schedule_day STORE AS nested_space;
insert into MY_SUBJECT(sub_id,sub_name,sub_schedule_day)
values('10','maths',My_nested_table('sun','wen','friday'));
select * from MY_SUBJECT;
17.What is pragma autonomous transaction.
A.The AUTONOMOUS_TRANSACTION pragma marks a routine as autonomous; that is, independent of the main transaction. In this context,
a routine is one of these: Schema-level (not nested) anonymous PL/SQL block. Standalone, package, or nested subprogram.
simple word
--------------
Pragma Autonomous Transaction Is uniq transaction for before transactions .it is not reflected to another trasactions.
we can user this transactions in PROCEDURES,FUNCTIONS,PAKAGES AND NESTED SUBPROGRAMS

DECLARE 
PRAGMA AUTONOMOUS_TRANSACTION 
BEGIN
INSERT INTO <TNM>VALUES(VALUE);
COMMIT/ROLLBACK;
END;/


create or replace FUNCTION PRAGMA_INSERTing (N number,s number,ma NUMBER,e varchar2)
RETURN VARCHAR2 AS b VARCHAR2(100);
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN 
insert INTO emp (emp_no,salary,manager,empid)values(N,s,ma,e);
B:='EMP_NO '||' '||N||',SALARY '||' '||S||',MANAGER '||' '||MA||',EMPID '||' '||E;
COMMIT;
RETURN b;
END;

18.How to use Autonomous Transaction?

For making a transaction as Autonomous Transaction we need to employ AUTONOMOUS_TRANSACTION pragma in the declaration section of PL/SQL block as shown in below block.

DECLARE
    PRAGMA  AUTONOMOUS_TRANSACTION;
BEGIN
    ...
END;
Below example illustrates how to use AUTONOMOUS_TRANSACTION. We have created two tables EMPLOYEE,TABLE_AUDIT, one sequence TABLE_AUDIT_ID_SEQ.

CREATE TABLE EMPLOYEE
(
    EMP_ID     NUMBER(10),
    EMP_NAME   VARCHAR2(40),
    DEPT_ID     NUMBER(10)
);

CREATE TABLE TABLE_AUDIT
(
  ID            NUMBER(10) NOT NULL,
  ACTION        VARCHAR2(10) NOT NULL,  
  CREATED_TIME  TIMESTAMP
);

CREATE SEQUENCE TABLE_AUDIT_ID_SEQ;
See the below definition for the trigger TIG_AUDIT_EMP. We have not used Autonomous_Transaction in this trigger.

CREATE OR REPLACE TRIGGER TIG_AUDIT_EMP
AFTER INSERT OR UPDATE OR DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO TABLE_AUDIT 
    VALUES (TABLE_AUDIT_ID_SEQ.NEXTVAL,'INSERT',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO TABLE_AUDIT 
    VALUES (TABLE_AUDIT_ID_SEQ.NEXTVAL,'UPDATE',SYSTIMESTAMP);
    ELSE
        INSERT INTO TABLE_AUDIT 
    VALUES (TABLE_AUDIT_ID_SEQ.NEXTVAL,'DELETE',SYSTIMESTAMP);   
    END IF;
END;
Now we are ready with all necessary database objects for our demonstration. I am executing INSERT and UPDATE statement on employee table and commiting the transaction.

SQL> INSERT INTO EMPLOYEE VALUES(1,'RAM','10');
1 row created.
SQL> INSERT INTO EMPLOYEE VALUES(2,'GANESH',11);
1 row created.
SQL> UPDATE EMPLOYEE SET DEPT_ID = 15 WHERE EMP_ID = 1;
1 row updated.
SQL> COMMIT;
Commit complete.

SQL> SELECT * FROM EMPLOYEE;
    EMP_ID EMP_NAME     DEPT_ID
---------- ------------ ----------
         1 RAM          15
         2 GANESH       11

SQL> SELECT * FROM TABLE_AUDIT;
        ID ACTION    CREATED_TIME
---------- --------- ----------------------------
         1 INSERT   24-JUL-13 03.26.51.819656 PM
         2 INSERT   24-JUL-13 03.27.39.634371 PM
         3 UPDATE   24-JUL-13 03.28.20.243719 PM
Both tables are having the all the transaction data. But what if we issue DML Statement and ROLLBACK the transaction.

SQL> INSERT INTO EMPLOYEE VALUES (4,'Sagar',20);
1 row created.
SQL> INSERT INTO EMPLOYEE VALUES(5,'Prampod',21);
1 row created.
SQL> DELETE FROM EMPLOYEE WHERE EMP_ID = 1;
1 row deleted.
SQL> ROLLBACK;
Rollback complete.

SQL> SELECT * FROM TABLE_AUDIT;
        ID ACTION    CREATED_TIME
---------- --------- ----------------------------
         1 INSERT   24-JUL-13 03.26.51.819656 PM
         2 INSERT   24-JUL-13 03.27.39.634371 PM
         3 UPDATE   24-JUL-13 03.28.20.243719 PM
TABLE_AUDIT is not having the above transaction statements data. But we should have all the transaction data whether transaction gets COMMIT or ROLLBACK.

For this we need to make trigger transaction as Autonomous_Transaction. See the below updated trigger defition.

CREATE OR REPLACE TRIGGER TIG_AUDIT_EMP
AFTER INSERT OR UPDATE OR DELETE ON EMPLOYEE
FOR EACH ROW
DECLARE
    PRAGMA  AUTONOMOUS_TRANSACTION;
BEGIN
    IF INSERTING THEN
        INSERT INTO TABLE_AUDIT 
    VALUES (TABLE_AUDIT_ID_SEQ.NEXTVAL,'INSERT',SYSTIMESTAMP);
    ELSIF UPDATING THEN
        INSERT INTO TABLE_AUDIT 
    VALUES (TABLE_AUDIT_ID_SEQ.NEXTVAL,'UPDATE',SYSTIMESTAMP);
    ELSE
        INSERT INTO TABLE_AUDIT 
    VALUES (TABLE_AUDIT_ID_SEQ.NEXTVAL,'DELETE',SYSTIMESTAMP);   
    END IF;

    COMMIT;

END;
I am executing the above rollback statements once again.

SQL> INSERT INTO EMPLOYEE VALUES (4,'Sagar',20);
1 row created.
SQL> INSERT INTO EMPLOYEE VALUES(5,'Prampod',21);
1 row created.
SQL> DELETE FROM EMPLOYEE WHERE EMP_ID = 1;
1 row deleted.
SQL> ROLLBACK;
Rollback complete.

SQL> SELECT * FROM TABLE_AUDIT;
        ID ACTION     CREATED_TIME
---------- ---------- ------------------------------
         1 INSERT     24-JUL-13 03.26.51.819656 PM
         2 INSERT     24-JUL-13 03.27.39.634371 PM
         3 UPDATE     24-JUL-13 03.28.20.243719 PM
         8 INSERT     24-JUL-13 04.28.15.410866 PM
         9 INSERT     24-JUL-13 04.28.22.401043 PM
        10 DELETE     24-JUL-13 04.28.27.615402 PM
